# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Say hello
GET /                                   controllers.HomeController.index

# Download a BAM index
GET /download/index/:key                controllers.BamDownloadController.downloadIndex(key: String, desc: Option[String])

# Required by IGV.js that makes two similar queries but one with a '.bai' suffix for th eindex
GET /download/$key<([\w.]+).bai>        controllers.BamDownloadController.downloadIndex(key: String, desc: Option[String])
GET /downloadRange/$key<([\w.]+).bai>   controllers.BamDownloadController.downloadIndex(key: String, desc: Option[String])

# Download a BAM file
GET /download/:key/:region              controllers.BamDownloadController.download(key: String, region: String, desc: Option[String])
GET /downloadRange/:key                 controllers.BamDownloadController.downloadRange(key: String, desc: Option[String])

# Create a symlink of a BAM file in a public served dir and return the path to it
GET /symlink/:key                       controllers.BamSymlinkController.symlink(key: String, region: Option[String], desc: Option[String])

# Return the text output of "samtools view -hb"
GET /read/:key                          controllers.BamReadController.read(key: String, region: String ?= "", desc: Option[String])

# Return JSON-formatted reads
GET /view/:key                          controllers.BamViewController.view(key: String, region: String ?= "", desc: Option[String])




## Startup examples

# An example controller showing how to use dependency injection
GET /count                      controllers.CountController.count

# An example controller showing how to write asynchronous code
GET /message                    controllers.AsyncController.message

# Map static resources from the /public folder to the /assets URL path
GET /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
